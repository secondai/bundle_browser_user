{
  "_id": "5aa2e51867795f001ebc5af8",
  "nodeId": "5a8e6c8e974a57006dd9a5bc",
  "type": "react_component:0.0.1:local:98912hd89",
  "data": {
    "key": "3ae95ba5-2d74-4fa4-846d-768b503c398b",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      const Router = universe.ReactRouterDomRouter;\n      const Route = universe.ReactRouterDomRoute;\n      const Switch = universe.ReactRouterDomSwitch;\n      \n      class EmbeddedComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              embeddedComponenthere\n            </div>\n          )\n        }\n      }\n      \n      class ErrorComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        render(){\n          return (\n            <div>\n              ErrorLoading\n            </div>\n          )\n        }\n      }\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {\n            developerComponent: null,\n          }\n        }\n        \n        componentDidMount(){\n          \n          return new Promise(async (resolve,reject)=>{\n            \n            try {\n                \n              let result = await universe.searchMemory({\n                filter: {\n                  sqlFilter: {\n                    type: 'react_component:0.0.1:local:98912hd89',\n                    data: {\n                      internalId: 'DefaultLayout'\n                    }\n                  }\n                }\n              });\n              let componentNode = await universe.runInVM(result[0],{});\n              this.setState({\n                defaultLayout: componentNode.data\n              })\n            } catch(err){\n              console.error('Failed getting new component4');\n            }\n            \n            try {\n                \n              let result = await universe.searchMemory({\n                filter: {\n                  sqlFilter: {\n                    type: 'react_component:0.0.1:local:98912hd89',\n                    data: {\n                      internalId: 'MainDeveloperComponent'\n                    }\n                  }\n                }\n              });\n              let componentNode = await universe.runInVM(result[0],{});\n              this.setState({\n                developerComponent: componentNode.data\n              })\n            } catch(err){\n              console.error('Failed getting new component4');\n            }\n            \n            \n            try {\n                \n              let result = await universe.searchMemory({\n                filter: {\n                  sqlFilter: {\n                    type: 'react_component:0.0.1:local:98912hd89',\n                    data: {\n                      internalId: 'MainCommandsComponent'\n                    }\n                  }\n                }\n              });\n              let componentNode = await universe.runInVM(result[0],{});\n              this.setState({\n                commandsComponent: componentNode.data\n              })\n            } catch(err){\n              console.error('Failed getting new component4');\n            }\n            \n            \n            try {\n                \n              let result = await universe.searchMemory({\n                filter: {\n                  sqlFilter: {\n                    type: 'react_component:0.0.1:local:98912hd89',\n                    data: {\n                      internalId: 'MainUserComponent'\n                    }\n                  }\n                }\n              });\n              let componentNode = await universe.runInVM(result[0],{});\n              this.setState({\n                userViewComponent: componentNode.data\n              })\n            } catch(err){\n              console.error('Failed getting new component4');\n            }\n            \n          });\n          \n        }\n        \n        render(){\n          \n          const DeveloperComponent = this.state.developerComponent || ErrorComponent;\n          const CommandsComponent = this.state.commandsComponent || ErrorComponent;\n          const UserViewComponent = this.state.userViewComponent || ErrorComponent;\n          const DefaultLayout = this.state.defaultLayout || ErrorComponent;\n          \n          return (\n            <Router>\n              <Switch>\n                <DefaultLayout exact path=\"/\" component={CommandsComponent}/>\n                <DefaultLayout exact path=\"/friends\" component={UserViewComponent}/>\n                <DefaultLayout exact path=\"/dev\" component={DeveloperComponent}/>\n              </Switch>\n            </Router>\n          )\n        }\n      }\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "MainComponent"
  },
  "active": true,
  "createdAt": 1520624920893,
  "updatedAt": null
}