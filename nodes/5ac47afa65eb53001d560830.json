{
  "_id": "5ac47afa65eb53001d560830",
  "nodeId": "5ac47ae265eb53001d56081e",
  "type": "react_component:0.0.1:local:98912hd89",
  "data": {
    "version": "5",
    "note": "MainUserComponent",
    "key": "a894b5e3-0923-4929-a93a-fc74c03d17a4",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      const Link = universe.ReactRouterDomLink;\n      \n      class EmbeddedComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              embeddedComponenthere\n            </div>\n          )\n        }\n      }\n      \n      class ErrorComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        render(){\n          return (\n            <div>\n              ErrorLoading\n            </div>\n          )\n        }\n      }\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {\n            \n          }\n        }\n        \n        componentDidMount(){\n          \n          console.log('Mounted MainNodeChainsComponent');\n          \n          return new Promise(async (resolve,reject)=>{\n            \n            let ExternalIdentityNodes = await universe.searchMemory({\n              filter: {\n                sqlFilter: {\n                  type: 'external_identity:0.0.1:local:8982f982j92',\n                  data: {\n                    commonName: 'main'\n                  }\n                }\n              }\n            });\n            let ExternalIdentityNode = ExternalIdentityNodes[0];\n            this.props.setState({\n              OwnerSecondExternalIdentityNode: ExternalIdentityNode\n            });\n              \n            \n            let listComponent = await this.props.loadComponent({\n              internalId: 'ListNodeChainsComponent'\n            });\n            this.setState({\n              listComponent\n            })\n            \n            let viewComponent = await this.props.loadComponent({\n              internalId: 'ViewNodeChainComponent'\n            });\n            this.setState({\n              viewComponent\n            })\n            \n          \n          });\n          \n          \n        }\n        \n        @autobind\n        handleTest(){\n          this.setState({\n            value: this.state.value + 1\n          })\n        }\n        \n        \n        render(){\n          \n          const ListComponent = this.state.listComponent || ErrorComponent;\n          const ViewComponent = this.state.viewComponent || ErrorComponent;\n          \n          return (\n            <div className=\"flex-main\">\n              <div className=\"flex-left\" style={{padding:'4px'}}>\n                \n                <ListComponent />\n                \n              </div>\n              <div className=\"flex-middle\">\n                \n                {\n                  this.props.state.nodeChainNode ?\n                  <RecreateChildOnPropsChange \n                      node={this.props.state.nodeChainNode}\n                    >\n                    <ViewComponent\n                      node={this.props.state.nodeChainNode}\n                    />\n                  </RecreateChildOnPropsChange>\n                  :'Choose a NodeChain for more information'\n                }\n                \n                \n              </div>\n              \n            </div>\n          )\n        }\n      }\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      mycomponent = universe.ReactHelpers(mycomponent);\n      \n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "MainNodeChainsComponent",
    "author": "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcuXovU+RZy85KMqLakYSH1mdV\nWdpEUtgcXUyGyU5hVeTO7BkV/kxeC2upcxOwNnrBOdsvHI3nrrILgt90/hCSHKzx\nhOFLREorGoKtSEHxI7/SnzzlWtV3gT/IP5GVHIyvuJBx3hCti0dH55DZG8iMGZ2y\ncGpV73Dez3hHmeBh6wIDAQAB\n-----END PUBLIC KEY-----"
  },
  "active": true,
  "createdAt": 1522825978138,
  "updatedAt": null
}