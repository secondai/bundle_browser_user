{
  "_id": "5a8e6c93974a57006dd9a5c6",
  "nodeId": "5a8e6c8e974a57006dd9a5bc",
  "type": "react_component:0.0.1:local:98912hd89",
  "data": {
    "key": "97babb15-ed8d-42a5-ae26-b197c308189a",
    "internalId": "MainCommandsComponent",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      const Link = universe.ReactRouterDomLink;\n      \n      class EmbeddedComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              embeddedComponenthere\n            </div>\n          )\n        }\n      }\n      \n      class ErrorComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        render(){\n          return (\n            <div>\n              ErrorLoading\n            </div>\n          )\n        }\n      }\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {\n            inputText: ''\n          }\n        }\n        \n        componentDidMount(){\n          \n          console.log('Mounted MainCommandsComponent');\n          \n          return new Promise(async (resolve,reject)=>{\n            \n            let ExternalIdentityNodes = await universe.searchMemory({\n              filter: {\n                sqlFilter: {\n                  type: 'external_identity:0.0.1:local:8982f982j92',\n                  data: {\n                    commonName: 'main'\n                  }\n                }\n              }\n            });\n            let ExternalIdentityNode = ExternalIdentityNodes[0];\n            this.props.setState({\n              OwnerSecondExternalIdentityNode: ExternalIdentityNode\n            });\n            \n            this.fetchPrivateName();\n          \n          });\n          \n        }\n        \n        @autobind\n        fetchPrivateName(){\n          \n          return new Promise(async (resolve, reject)=>{\n              \n            let ExternalIdentityNodes = await universe.searchMemory({\n              filter: {\n                sqlFilter: {\n                  type: 'external_identity:0.0.1:local:8982f982j92',\n                  data: {\n                    commonName: 'main'\n                  }\n                }\n              }\n            });\n            let ExternalIdentityNode = ExternalIdentityNodes[0];\n            \n            try {\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          {\n                            matchActionType: 'search_internal_datasource:0.0.1:local:2h3ufih8s9h2f',\n                            dataForAction: {\n                              type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                              data: {\n                                matchFunctionNode: {\n                                  // query here!\n                                  // action_pointer:0.0.1:local:238972ncr\n                                  type: 'code_miniverse:0.0.1:local:2782fh8823s23',\n                                  data: {\n                                    code: `(()=>{\n                                      // Action \n                                      // - childNode common_type:0.0.1:local:298fh29h2323f == \"action\" \n                                      \n                                      let inputNode = INPUT.data.inputNode;\n                                      \n                                      if(inputNode.nodeId){\n                                        return false;\n                                      }\n                                      \n                                      if(inputNode.type != 'identity_private:0.0.1:local:3298f2j398233'){\n                                        return false;\n                                      }\n                                      return inputNode;\n                                      \n                                    })()`\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              // let nodes = universe.lodash.find(response.data.actionResponses[0].data[0].nodes,{type: 'code:0.0.1:local:32498h32f2'});\n              let nodes = response.data.actionResponses[0].data;\n              \n              let privateNode = nodes[0];\n              console.log('PrivateNode:', privateNode);\n              \n              // let componentNode = await universe.runInVM(result[0],{});\n              this.props.setState({\n                privateNode\n              })\n              \n              \n            } catch(err){\n              console.error('Failed getting local nodes');\n            }\n          });\n        }\n        \n        @autobind\n        handleTest(){\n          this.setState({\n            value: this.state.value + 1\n          })\n        }\n        \n        @autobind\n        async handleClearMemory(){\n          \n          await universe.clearMemory();\n          WINDOW.location.reload();\n          \n        }\n        \n        \n        render(){\n          \n          // const MainEditorComponent = this.state.mainEditor || ErrorComponent;\n          \n          // let componentCommands = await this.props.loadComponent({\n          //   internalId: 'ListComponent'\n          // });\n          // this.setState({\n          //   componentCommands\n          // })\n          \n          return (\n            <div className=\"flex-main\">\n              <div className=\"flex-left\" style={{padding:'4px'}}>\n                \n                <h3 className=\"title is-5\">\n                  History of Commands\n                </h3>\n                <h3 className=\"subtitle is-6\">\n                  Things you've said\n                </h3>\n                \n              </div>\n              <div className=\"flex-middle\" style={{borderTop:'1px solid #eee', padding: '24px'}}>\n                \n                <div className=\"field\">\n                  <div className=\"control\">\n                    <input \n                      className=\"input\"\n                      type=\"text\" \n                      placeholder=\"Enter text command here\" \n                      value={this.state.inputText}\n                      onChange={e=>this.setState({inputText:e.target.value})}\n                    />\n                  </div>\n                </div>\n                \n                \n                <div className=\"content\">\n                \n                  <ul>\n                  \n                    <li style={{marginLeft:'-30px',listStyle:'none', fontWeight:'bold'}}>\n                      Send a command: \n                    </li>\n                    \n                    <li>\n                      \"who are my friends\" \n                    </li>\n                    \n                    <li>\n                      \"connect to 'friends words here'\" \n                    </li>\n                    \n                    <li>\n                      \"show me photos from friends\" \n                    </li>\n                    \n                    <li>\n                      \"sign me up for an ebay account\" \n                    </li>\n                    \n                    <li>\n                      \"send grandma 50 buckaroos\" \n                    </li>\n                    \n                    <li>\n                      \"call mom\" \n                    </li>\n                    \n                    <li>\n                      \"lemme watch some netflix\" \n                    </li>\n                    \n                    <li>\n                      \"what italian restaurants in san francisco north beach are good?\" \n                    </li>\n                    \n                  </ul>\n                  \n                </div>\n                \n              </div>\n              <div className=\"flex-right\" style={{padding:'4px'}}>\n                \n                <h3 className=\"title is-5\">\n                  Common Inputs\n                </h3>\n                <h3 className=\"subtitle is-6\">\n                  For current sequence\n                </h3>\n                \n              </div>\n              \n            </div>\n          )\n        }\n      }\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      mycomponent = universe.ReactHelpers(mycomponent);\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()"
  },
  "active": true,
  "createdAt": 1519283347250,
  "updatedAt": null
}