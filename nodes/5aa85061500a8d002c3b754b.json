{
  "_id": "5aa85061500a8d002c3b754b",
  "nodeId": "5a8e6c8e974a57006dd9a5bc",
  "type": "react_component:0.0.1:local:98912hd89",
  "data": {
    "key": "68ddfc23-3f94-4a01-a905-7f9c48286d60",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      class ErrorComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              [ErrorRenderer]\n            </div>\n          )\n        }\n      }\n      \n      class ListComponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {\n            nodes: [],\n            text: '',\n            pastable: false,\n            pasteText: ''\n          }\n        }\n        \n        componentDidMount(){\n          this.fetchLocalNodes();\n          \n          \n          universe.EE.on('nodes-modified', this.fetchLocalNodes);\n        \n        }\n        componentWillUnmount(){\n          universe.EE.removeListener('nodes-modified', this.fetchLocalNodes);\n        }\n        \n        @autobind\n        fetchLocalNodes(){\n          \n          // \n          return new Promise(async (resolve,reject)=>{\n            \n            \n            // Fetch all of my local Code/React nodes \n            // - get the key (unique) for each) \n            // - ask Teacher Second for code matches for code items (and react components) \n            let CodeNodes = await universe.searchMemory({\n              filter: {\n                filterNodes: tmpNodes=>{\n                  return new Promise((resolve, reject)=>{\n                    tmpNodes = tmpNodes.map(tmpNode=>{\n                      let types = [\n                        'code',\n                        'react_component',\n                        'preparse_code',\n                        'action_code'\n                      ]\n                      if(types.indexOf(tmpNode.type.split(':')[0]) === -1){\n                        return false;\n                      }\n                      delete tmpNode.parent;\n                      delete tmpNode.nodes;\n                      return tmpNode;\n                    })\n                    resolve(universe.lodash.compact(tmpNodes));\n                  });\n                },\n              }\n            });\n            \n            \n            // let componentNode = await universe.runInVM(result[0],{});\n            this.setState({\n              nodes: CodeNodes\n            })\n            \n            \n          });\n          \n        }\n        \n        @autobind\n        renderNodes(nodes, parentInFilter){\n          \n          let filter = this.state.text;\n          \n          nodes = universe.lodash.sortBy(nodes, 'updatedAt');\n          // console.log('Nodes',nodes);\n          \n          return (\n            <div className=\"\">\n              {\n                nodes.map(node=>{\n                          \n                  // include this node if it, or of of it's children, matches\n                  // - highlight if a match \n                \n                  const nodeMatchFunc = (node) => {\n                    let nodeMatch;\n                    if(node.type && node.type.includes(filter)){\n                      nodeMatch = true;\n                    }\n                    if(node.data && JSON.stringify(node.data).includes(filter)){\n                      nodeMatch = true;\n                    }\n                    // type (t:)\n                    if(filter.includes('t:') && node.type){\n                      let tmpFilter = filter.split('t:')[1];\n                      if(node.type && node.type.includes(tmpFilter)){\n                        nodeMatch = true;\n                      }\n                    }\n                    // data (d:) \n                    if(filter.includes('d:')){\n                      let tmpFilter = filter.split('d:')[1];\n                      if(node.data && JSON.stringify(node.data).includes(tmpFilter)){\n                        nodeMatch = true;\n                      }\n                    }\n                    \n                    return nodeMatch;\n                    \n                  }\n                  \n                  const childMatchFunc = (nodes) => {\n                    for(let tmpNode of nodes){\n                      if(nodeMatchFunc(tmpNode)){\n                        return true;\n                      }\n                      if(childMatchFunc(tmpNode.nodes)){\n                        return true;\n                      }\n                    }\n                    return false;\n                  }\n                  \n                  let hasFilter = filter.length ? true:false;\n                  let nodeMatch;\n                  let childMatch;\n                  if(hasFilter){\n                    \n                    nodeMatch = nodeMatchFunc(node);\n                    childMatch = childMatchFunc(node.nodes || []);\n                    \n                    // check children \n                    // - lots of recursion here, probably should memoize \n                    \n                    \n                    // // filter by \"text\" if set \n                    // nodes = nodes.filter(node=>{\n                    //   return true;\n                    // })\n                  }\n                  \n                  if(hasFilter && !nodeMatch && !childMatch && !parentInFilter){\n                    return undefined; // skip\n                  }\n                  \n                  let tooltip = null;\n                  // return a different tooltip depending on the type\n                  let nodeTypeFirst = node.type ? node.type.split(':')[0]:null;\n                  try {\n                    switch(nodeTypeFirst){\n                      case 'react_component':\n                        tooltip = node.data.internalId;\n                        break;\n                        \n                      case 'parent_of_nodes_to_learn':\n                        tooltip = node.data.learn;\n                        break;\n                        \n                      case 'text_tag':\n                        tooltip = node.data.text;\n                        break;\n                        \n                      case 'capability':\n                        tooltip = node.data.key;\n                        break;\n                        \n                      case 'code':\n                        tooltip = node.data.note;\n                        break;\n                        \n                      case 'external_identity':\n                        tooltip = node.data.commonName || '(no commonName)';\n                        break;\n                        \n                      case 'external_identity_connect_method':\n                        tooltip = node.data.connection;\n                        break;\n                        \n                      case 'folder':\n                        tooltip = node.data.key;\n                        break;\n                        \n                      case 'node_repo_on_github':\n                        tooltip = node.data.repo;\n                        break;\n                        \n                      default:\n                        break;\n                    }\n                  }catch(err){\n                  }\n                  \n                  return (\n                    <div key={node._id}>\n                      <div onClick={e=>this.handleClickNode(node)} style={{cursor:'pointer', color: nodeMatch ? 'blue':'inherit'}}>\n                    \n                          <div className=\"hover-item tooltip-holder\">\n                            <div className=\"tooltip-trigger\">\n                              {\n                                (this.props.state.editingNode && this.props.state.editingNode._id == node._id) ?\n                                  <strong>\n                                    {node.type}\n                                  </strong>\n                                  :\n                                  node.type\n                              }\n                            </div>\n                            {\n                              !tooltip ? '':\n                              <div className=\"tooltip\">\n                                {tooltip}\n                              </div>\n                            }\n                          </div>\n                          \n                      </div>\n                      {\n                        !(node.nodes && node.nodes.length) ? '':\n                        <div style={{paddingLeft:'8px'}}>\n                          {this.renderNodes(node.nodes, parentInFilter || nodeMatch)}\n                        </div>\n                      }\n                    </div>\n                  )\n                })\n              }\n            </div>\n          )\n        }\n        \n        render(){\n          \n          let nodes = this.state.nodes;\n          \n          // load actions from remote!\n          // - want to have some default actions that are easy to call/trigger \n          // - simple way of calling a Capability? \n          let actions = [];\n          \n          return (\n            <div className=\"\">\n              \n              {\n                !this.state.pastable ? '':\n                <div>\n                  <textarea className=\"textarea\" value={this.state.pasteText} onChange={e=>this.setState({pasteText:e.target.value})} />\n                  <button className=\"button is-primary\" onClick={this.handleInsertNodePaste}>Save</button>\n                  <button className=\"button pull-right\" onClick={e=>this.setState({pastable:false})}>cancel</button>\n                </div>\n              }\n              \n              <strong>\n                My Cloud Second\n                \n                &nbsp;\n                \n                <button className={\"button is-small \" + (this.state.fetchingRemote ? 'is-loading':'')} onClick={this.fetchRemoteNodes}>\n                  <span className=\"icon is-small\">\n                    <i className=\"fa fa-refresh\"></i>\n                  </span>\n                </button>\n                \n                <div className=\"dropdown is-hoverable is-right pull-right\">\n                  <div className=\"dropdown-trigger\">\n                    <button className=\"button is-small\">\n                      <span className=\"icon is-small\">\n                        <i className=\"fa fa-angle-down\"></i>\n                      </span>\n                    </button>\n                  </div>\n                  <div className=\"dropdown-menu\">\n                    <div className=\"dropdown-content\">\n                    \n                      <a className=\"dropdown-item\" onClick={this.handleNewId}>\n                        Copy New UUID to Clipboard\n                      </a>\n                      \n                      <a className=\"dropdown-item\" onClick={this.handleNewNode}>\n                        New Node by Type\n                      </a>\n                      \n                      <a className=\"dropdown-item\" onClick={e=>this.setState({pastable:true})}>\n                        Insert Node By Paste\n                      </a>\n                      \n                      <a className=\"dropdown-item\" onClick={this.handleEncryptString}>\n                        Encrypt String\n                      </a>\n                      \n                      <div className=\"dropdown-divider\"></div>\n                      \n                      <a className=\"dropdown-item\" onClick={this.handleAddMany}>\n                        Insert Many for Test\n                      </a>\n                      \n                      \n                    </div>\n                  </div>\n                </div>\n                \n              </strong>\n              \n              \n              <div>\n                <input className=\"input\" value={this.state.text} onChange={e=>this.setState({text:e.target.value})} placeholder=\"Filter on type/data\" />\n              </div>\n              \n              {this.renderNodes(nodes)}\n              \n            </div>\n          )\n        }\n      }\n      \n      ListComponent = universe.ReactGlobalState(ListComponent);\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: ListComponent\n      });\n      \n    }catch(err){\n      resolve({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "LocalCodeNodesComponent"
  },
  "active": true,
  "createdAt": 1520980065298,
  "updatedAt": 1520980561534
}