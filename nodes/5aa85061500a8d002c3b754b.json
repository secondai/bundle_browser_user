{
  "_id": "5aa85061500a8d002c3b754b",
  "nodeId": "5a8e6c8e974a57006dd9a5bc",
  "type": "react_component:0.0.1:local:98912hd89",
  "data": {
    "version": "2",
    "note": "",
    "internalId": "LocalCodeNodesComponent",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      class ErrorComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              [ErrorRenderer]\n            </div>\n          )\n        }\n      }\n      \n      class ListComponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {\n            nodes: [],\n            text: '',\n            pastable: false,\n            pasteText: ''\n          }\n        }\n        \n        componentDidMount(){\n          this.fetchAll();\n          \n          \n          universe.EE.on('nodes-modified', this.fetchAll);\n        \n        }\n        componentWillUnmount(){\n          universe.EE.removeListener('nodes-modified', this.fetchAll);\n        }\n        \n        @autobind\n        async fetchAll(){\n          \n          // Get local code nodes \n          let LocalCodeNodes = await this.fetchLocalNodes();\n          \n          // Get latest for local nodes from NodeChain \n          let UpdatedCodeNodes = await this.fetchUpdatedNodes(LocalCodeNodes);\n          \n        }\n        \n        @autobind\n        fetchLocalNodes(){\n          \n          // \n          return new Promise(async (resolve,reject)=>{\n            \n            \n            // Fetch all of my local Code/React nodes \n            // - get the key (unique) for each) \n            // - ask Teacher Second for code matches for code items (and react components) \n            let CodeNodes = await universe.searchMemory({\n              filter: {\n                filterNodes: tmpNodes=>{\n                  return new Promise((resolve, reject)=>{\n                    tmpNodes = tmpNodes.map(tmpNode=>{\n                      let types = [\n                        'code',\n                        'react_component',\n                        'preparse_code',\n                        'action_code'\n                      ]\n                      if(types.indexOf(tmpNode.type.split(':')[0]) === -1){\n                        return false;\n                      }\n                      delete tmpNode.parent;\n                      delete tmpNode.nodes;\n                      return tmpNode;\n                    })\n                    resolve(universe.lodash.compact(tmpNodes));\n                  });\n                },\n              }\n            });\n            \n            \n            // let componentNode = await universe.runInVM(result[0],{});\n            this.setState({\n              nodes: CodeNodes\n            })\n            \n            return resolve(CodeNodes);\n            \n            \n          });\n          \n        }\n        \n        @autobind\n        fetchUpdatedNodes(CodeNodes){\n          return new Promise(async (resolve,reject)=>{\n            \n            // Search chain for latest node (must have author/ref) \n            \n            this.setState({\n              fetching: true\n            })\n            \n            let searches = [];\n            CodeNodes.forEach(node=>{\n              if(!node.data.key){\n                // skipping, no author!\n                node.__status = 'missing_local_ref' // update node by reference\n                return;\n              }\n              node.__status = 'searching';\n              let obj = {};\n              obj.ref = node.data.key;\n              if(node.data.author){\n                obj.author = node.data.author;\n              }\n              searches.push(obj);\n            })\n            \n            this.setState({\n              nodes: CodeNodes\n            })\n            \n            let chainNodes = await universe.findOnNodeChain({\n              method: 'latestForEach',\n              searches\n            });\n            \n            console.log('chainNodes', chainNodes);\n            \n            // Iterate over CodeNodes and add the latest chainNode that matches \n            // - update status \n            CodeNodes.forEach(node=>{\n              if(!node.data.key){\n                // already skipped\n                console.log('skipped');\n                return;\n              }\n              // find recent from chain\n              let recent = universe.lodash.find(chainNodes,cn=>{\n                if(node.data.author && \n                  node.data.key == cn.ref && \n                  node.data.author == cn.author\n                  ){\n                  return true;\n                } else if(\n                  node.data.key == cn.ref) {\n                  return true;\n                }\n                return false;\n              });\n              if(!recent){\n                console.log('not_found_on_chain');\n                node.__status = 'not_found_on_chain';\n                return;\n              }\n              \n              // TODO: have a __status for a new author? \n              \n              if(node.data.version && node.data.version.toString() == recent.version.toString()){\n                node.__status = 'same_version';\n              } else {\n                // new version available!\n                node.__status = 'diff_version';\n                node.ChainNode = recent;\n              }\n              \n            })\n            \n            // let componentNode = await universe.runInVM(result[0],{});\n            this.setState({\n              nodes: CodeNodes,\n              fetching: false\n            })\n            \n            return resolve(CodeNodes);\n            \n            \n          });\n          \n        }\n        \n        @autobind\n        async updateNewCode(){\n          \n          this.setState({\n            fetching: true\n          })\n          \n          let CodeNodes = this.state.nodes;\n          \n          // update local nodes \n          // - data.[note, code, version]\n          try {\n            for(let node of CodeNodes){\n              if(node.__status == 'diff_version'){\n                node.data.code = node.ChainNode.data.code;\n                node.data.note = node.ChainNode.data.note;\n                node.data.version = node.ChainNode.data.version;\n                \n                console.log('Updating Local Node:', node);\n                let updatedNode = await universe.updateNode(node); \n              }\n            }\n          }catch(err){\n            console.error(err);\n          }\n          \n          WINDOW.alert('Updated. Might need to reload page for visual changes to take effect');\n          \n          this.fetchAll();\n          \n          this.setState({\n            fetching: false\n          });\n          \n          // setTimeout(()=>{\n          //   WINDOW.location.reload();\n          // },1000);\n          \n          \n          \n        }\n        \n        @autobind\n        renderStatus(node){\n          \n          let opacity = 1;\n          let color = '';\n          let icon = '';\n          \n          switch(node.__status){\n            case 'missing_local_ref':\n              opacity = 0.5;\n              color = 'has-text-danger';\n              icon = 'fa-exclamation-triangle';\n              break;\n              \n            case 'searching':\n              icon = 'fa-spinner';\n              break;\n              \n            case 'not_found_on_chain':\n              color = 'has-text-warning';\n              icon = 'fa-exclamation-triangle';\n              break;\n              \n            case 'same_version':\n              icon = 'fa-angle-double-right';\n              break;\n              \n            case 'diff_version':\n              color = 'has-text-success'\n              icon = 'fa-plus-square';\n              break;\n              \n            default:\n              icon = '';\n              break;\n          }\n          \n          return (\n  \n            <div className=\"hover-item tooltip-holder\">\n              <div className=\"tooltip-trigger\">\n                <span className={\"icon \" + color} style={{opacity}}>\n                  <i className={\"fa \" + icon}></i>\n                </span>\n              </div>\n              <div className=\"tooltip\">\n                {node.__status}\n              </div>\n            </div>\n            \n          )\n        }\n        \n        @autobind\n        renderNodes(nodes, parentInFilter){\n          \n          let filter = this.state.text;\n          \n          nodes = universe.lodash.sortBy(nodes, 'updatedAt');\n          // console.log('Nodes',nodes);\n          \n          return (\n            <div className=\"\">\n              {\n                nodes.map(node=>{\n                          \n                  // include this node if it, or of of it's children, matches\n                  // - highlight if a match \n                \n                  const nodeMatchFunc = (node) => {\n                    let nodeMatch;\n                    if(node.type && node.type.includes(filter)){\n                      nodeMatch = true;\n                    }\n                    if(node.data && JSON.stringify(node.data).includes(filter)){\n                      nodeMatch = true;\n                    }\n                    // type (t:)\n                    if(filter.includes('t:') && node.type){\n                      let tmpFilter = filter.split('t:')[1];\n                      if(node.type && node.type.includes(tmpFilter)){\n                        nodeMatch = true;\n                      }\n                    }\n                    // data (d:) \n                    if(filter.includes('d:')){\n                      let tmpFilter = filter.split('d:')[1];\n                      if(node.data && JSON.stringify(node.data).includes(tmpFilter)){\n                        nodeMatch = true;\n                      }\n                    }\n                    \n                    return nodeMatch;\n                    \n                  }\n                  \n                  const childMatchFunc = (nodes) => {\n                    for(let tmpNode of nodes){\n                      if(nodeMatchFunc(tmpNode)){\n                        return true;\n                      }\n                      if(childMatchFunc(tmpNode.nodes)){\n                        return true;\n                      }\n                    }\n                    return false;\n                  }\n                  \n                  let hasFilter = filter.length ? true:false;\n                  let nodeMatch;\n                  let childMatch;\n                  if(hasFilter){\n                    \n                    nodeMatch = nodeMatchFunc(node);\n                    childMatch = childMatchFunc(node.nodes || []);\n                    \n                    // check children \n                    // - lots of recursion here, probably should memoize \n                    \n                    \n                    // // filter by \"text\" if set \n                    // nodes = nodes.filter(node=>{\n                    //   return true;\n                    // })\n                  }\n                  \n                  if(hasFilter && !nodeMatch && !childMatch && !parentInFilter){\n                    return undefined; // skip\n                  }\n                  \n                  let tooltip = null;\n                  // return a different tooltip depending on the type\n                  let nodeTypeFirst = node.type ? node.type.split(':')[0]:null;\n                  try {\n                    switch(nodeTypeFirst){\n                      case 'react_component':\n                        tooltip = node.data.internalId;\n                        break;\n                        \n                      case 'parent_of_nodes_to_learn':\n                        tooltip = node.data.learn;\n                        break;\n                        \n                      case 'text_tag':\n                        tooltip = node.data.text;\n                        break;\n                        \n                      case 'capability':\n                        tooltip = node.data.key;\n                        break;\n                        \n                      case 'code':\n                        tooltip = node.data.note;\n                        break;\n                        \n                      case 'external_identity':\n                        tooltip = node.data.commonName || '(no commonName)';\n                        break;\n                        \n                      case 'external_identity_connect_method':\n                        tooltip = node.data.connection;\n                        break;\n                        \n                      case 'folder':\n                        tooltip = node.data.key;\n                        break;\n                        \n                      case 'node_repo_on_github':\n                        tooltip = node.data.repo;\n                        break;\n                        \n                      default:\n                        break;\n                    }\n                  }catch(err){\n                  }\n                  \n                  return (\n                    <table className=\"\" key={node._id}>\n                      <tbody>\n                        <tr>\n                          <td style={{width:'28px'}}>\n                            {this.renderStatus(node)}\n                          </td>\n                          <td>\n                            <div onClick={e=>this.handleClickNode(node)} style={{cursor:'pointer', color: nodeMatch ? 'blue':'inherit'}}>\n                          \n                                <div className=\"hover-item tooltip-holder\">\n                                  <div className=\"tooltip-trigger\">\n                                    {\n                                      (this.props.state.editingNode && this.props.state.editingNode._id == node._id) ?\n                                        <strong>\n                                          {node.type}\n                                        </strong>\n                                        :\n                                        node.type\n                                    }\n                                  </div>\n                                  {\n                                    !tooltip ? '':\n                                    <div className=\"tooltip\">\n                                      {tooltip}\n                                    </div>\n                                  }\n                                </div>\n                                \n                            </div>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  )\n                })\n              }\n            </div>\n          )\n        }\n        \n        render(){\n          \n          let nodes = this.state.nodes;\n          \n          // load actions from remote!\n          // - want to have some default actions that are easy to call/trigger \n          // - simple way of calling a Capability? \n          let actions = [];\n          \n          return (\n            <div className=\"\">\n              \n              {\n                !this.state.pastable ? '':\n                <div>\n                  <textarea className=\"textarea\" value={this.state.pasteText} onChange={e=>this.setState({pasteText:e.target.value})} />\n                  <button className=\"button is-primary\" onClick={this.handleInsertNodePaste}>Save</button>\n                  <button className=\"button pull-right\" onClick={e=>this.setState({pastable:false})}>cancel</button>\n                </div>\n              }\n              \n              <strong>\n                Local Code Nodes\n                \n                &nbsp;\n                \n                <button className={\"button is-small \" + (this.state.fetching ? 'is-loading':'')} onClick={this.fetchAll}>\n                  <span className=\"icon is-small\">\n                    <i className=\"fa fa-refresh\"></i>\n                  </span>\n                </button>\n                \n                <div className=\"dropdown is-hoverable is-right pull-right\">\n                  <div className=\"dropdown-trigger\">\n                    <button className=\"button is-small\">\n                      <span className=\"icon is-small\">\n                        <i className=\"fa fa-angle-down\"></i>\n                      </span>\n                    </button>\n                  </div>\n                  <div className=\"dropdown-menu\">\n                    <div className=\"dropdown-content\">\n                    \n                      <a className=\"dropdown-item\" onClick={this.updateNewCode}>\n                        Update all [+] (new version) \n                      </a>\n                      \n                    </div>\n                  </div>\n                </div>\n                \n              </strong>\n              \n              \n              <div>\n                <input className=\"input\" value={this.state.text} onChange={e=>this.setState({text:e.target.value})} placeholder=\"Filter on type/data\" />\n              </div>\n              \n              {this.renderNodes(nodes)}\n              \n            </div>\n          )\n        }\n      }\n      \n      ListComponent = universe.ReactGlobalState(ListComponent);\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: ListComponent\n      });\n      \n    }catch(err){\n      resolve({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "key": "68ddfc23-3f94-4a01-a905-7f9c48286d60"
  },
  "active": true,
  "createdAt": 1520980065298,
  "updatedAt": 1520999427617
}