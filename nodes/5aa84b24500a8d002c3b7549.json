{
  "_id": "5aa84b24500a8d002c3b7549",
  "nodeId": "5a8e6c8e974a57006dd9a5bc",
  "type": "react_component:0.0.1:local:98912hd89",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      const Link = universe.ReactRouterDomLink;\n      \n      class EmbeddedComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              embeddedComponenthere\n            </div>\n          )\n        }\n      }\n      \n      class ErrorComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        render(){\n          return (\n            <div>\n              ErrorLoading\n            </div>\n          )\n        }\n      }\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {\n            browserList: null,\n            remoteList: null,\n            mainEditor: null,\n            remoteFriendList: null,\n            remoteFriendDataList: null\n            // browser: null,\n          }\n        }\n        \n        componentDidMount(){\n          \n          return new Promise(async (resolve,reject)=>{\n              \n            try {\n                \n              let result = await universe.searchMemory({\n                filter: {\n                  sqlFilter: {\n                    type: 'react_component:0.0.1:local:98912hd89',\n                    data: {\n                      internalId: 'ListComponent'\n                    }\n                  }\n                }\n              });\n              let componentNode = await universe.runInVM(result[0],{});\n              this.setState({\n                browserList: componentNode.data\n              })\n            } catch(err){\n              console.error('Failed getting new component');\n            }\n            \n            try {\n                \n              let result = await universe.searchMemory({\n                filter: {\n                  sqlFilter: {\n                    type: 'react_component:0.0.1:local:98912hd89',\n                    data: {\n                      internalId: 'ListRemoteComponent'\n                    }\n                  }\n                }\n              });\n              let componentNode = await universe.runInVM(result[0],{});\n              this.setState({\n                remoteList: componentNode.data\n              })\n            } catch(err){\n              console.error('Failed getting new component2');\n            }\n            \n            \n            try {\n                \n              let result = await universe.searchMemory({\n                filter: {\n                  sqlFilter: {\n                    //nodeId: same parent Node as this one! \n                    type: 'react_component:0.0.1:local:98912hd89',\n                    data: {\n                      internalId: 'MainEditorComponent'\n                    }\n                  }\n                }\n              });\n              let componentNode = await universe.runInVM(result[0],{});\n              this.setState({\n                mainEditor: componentNode.data\n              })\n            } catch(err){\n              console.error('Failed getting new component2');\n            }\n            \n            \n            try {\n                \n              let result = await universe.searchMemory({\n                filter: {\n                  sqlFilter: {\n                    type: 'react_component:0.0.1:local:98912hd89',\n                    data: {\n                      internalId: 'ListRemoteConnectedToComponent'\n                    }\n                  }\n                }\n              });\n              let componentNode = await universe.runInVM(result[0],{});\n              this.setState({\n                remoteFriendList: componentNode.data\n              })\n            } catch(err){\n              console.error('Failed getting new component3');\n            }\n            \n            try {\n                \n              let result = await universe.searchMemory({\n                filter: {\n                  sqlFilter: {\n                    type: 'react_component:0.0.1:local:98912hd89',\n                    data: {\n                      internalId: 'ListRemoteConnectedToDataComponent'\n                    }\n                  }\n                }\n              });\n              let componentNode = await universe.runInVM(result[0],{});\n              this.setState({\n                remoteFriendDataList: componentNode.data\n              })\n            } catch(err){\n              console.error('Failed getting new component4');\n            }\n            \n          });\n          \n          \n          // this.setState({\n          //   value: 5\n          // });\n          \n          // WINDOW.alert(10);\n          // let x = WINDOW.prompt('what','');\n          // this.setState({\n          //   value: parseInt(x,10)\n          // })\n          \n          \n          // let IdentityNode = null;\n          // let identities = await universe.searchMemory({\n          //   filter: {\n          //     sqlFilter: {\n          //       type: 'remote_datasource:0.0.1:local:298f3h92hf9s8dhf23f'\n          //     },\n          //     // function for returning data from the Node, after filtering a bit \n          //     // - includes both the Node, and Nodes with nodeId (pointers) \n          //     filterNodes: tmpNodes=>{\n          //       // this runs isolated, outside of the above context? (not sure) \n          //       return new Promise((resolve, reject)=>{\n          //         resolve(tmpNodes);\n          //       });\n          //     },\n          //   }\n          // });\n        }\n        \n        @autobind\n        handleTest(){\n          this.setState({\n            value: this.state.value + 1\n          })\n        }\n        \n        @autobind\n        async handleClearMemory(){\n          \n          await universe.clearMemory();\n          WINDOW.location.reload();\n          \n        }\n        \n        \n        render(){\n          \n          const BrowserListComponent = this.state.browserList || ErrorComponent;\n          const RemoteListComponent = this.state.remoteList || ErrorComponent;\n          const RemoteFriendListComponent = this.state.remoteFriendList || ErrorComponent;\n          const RemoteFriendDataListComponent = this.state.remoteFriendDataList || ErrorComponent;\n          \n          const MainEditorComponent = this.state.mainEditor || ErrorComponent;\n          \n          return (\n            <div className=\"flex-main\">\n              <div className=\"flex-left\" style={{padding:'4px'}}>\n                \n                <div>\n                  <RemoteListComponent />\n                </div>\n                \n              </div>\n              <div className=\"flex-middle\">\n                \n                {\n                  this.props.state.editingNode ?\n                  <RecreateChildOnPropsChange \n                      node={this.props.state.editingNode}\n                    >\n                    <MainEditorComponent\n                      node={this.props.state.editingNode}\n                    />\n                  </RecreateChildOnPropsChange>\n                  :''\n                }\n                \n              </div>\n              <div className=\"flex-right\">\n                \n                {/*\n                <div>\n                  <RemoteFriendListComponent />\n                </div>\n                */}\n                \n              </div>\n            </div>\n          )\n        }\n      }\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "MainCodeUpdateComponent",
    "key": "1bc99811-86e9-4cea-8b78-c306af3c86b6"
  },
  "active": true,
  "createdAt": 1520978724067,
  "updatedAt": 1520978754351
}