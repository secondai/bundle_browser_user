{
  "_id": "5a8e6c90974a57006dd9a5c0",
  "nodeId": "5a8e6c8e974a57006dd9a5bc",
  "type": "react_component:0.0.1:local:98912hd89",
  "data": {
    "author": "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcuXovU+RZy85KMqLakYSH1mdV\nWdpEUtgcXUyGyU5hVeTO7BkV/kxeC2upcxOwNnrBOdsvHI3nrrILgt90/hCSHKzx\nhOFLREorGoKtSEHxI7/SnzzlWtV3gT/IP5GVHIyvuJBx3hCti0dH55DZG8iMGZ2y\ncGpV73Dez3hHmeBh6wIDAQAB\n-----END PUBLIC KEY-----",
    "version": "10",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      // Imports\n      const { ContextMenu, MenuItem, ContextMenuTrigger } = universe.ReactContextMenu;\n      \n      const Link = universe.ReactRouterDomLink;\n      \n      class ErrorComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              [ErrorRenderer]\n            </div>\n          )\n        }\n      }\n      \n      class ListComponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {\n            nodes: []\n          }\n        }\n        \n        componentDidMount(){\n          \n          this.fetchRemoteNodes();\n          \n          universe.EE.on('nodes-modified', this.fetchRemoteNodes);\n        \n        }\n        \n        componentWillUnmount(){\n          universe.EE.removeListener('nodes-modified', this.fetchRemoteNodes);\n        }\n        \n        componentWillReceiveProps(nextProps){\n          console.log('Friends componentWillReceiveProps:', nextProps);\n          this.fetchRemoteNodes();\n        }\n        \n        @autobind\n        fetchRemoteNodes(){\n          \n          console.log('Fetching remote Nodes');\n          \n          // \n          return new Promise(async (resolve,reject)=>{\n            \n            let ExternalIdentityNodes = await universe.searchMemory({\n              filter: {\n                sqlFilter: {\n                  type: 'external_identity:0.0.1:local:8982f982j92',\n                  data: {\n                    commonName: 'main'\n                  }\n                }\n              }\n            });\n            let ExternalIdentityNode = ExternalIdentityNodes[0];\n            \n            console.log('Fetching for', ExternalIdentityNode);\n            \n            try {\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          {\n                            matchActionType: 'search_internal_datasource:0.0.1:local:2h3ufih8s9h2f',\n                            dataForAction: {\n                              type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                              data: {\n                                matchFunctionNode: {\n                                  // query here!\n                                  // action_pointer:0.0.1:local:238972ncr\n                                  type: 'code_miniverse:0.0.1:local:2782fh8823s23',\n                                  data: {\n                                    code: `(()=>{\n                                      // Action \n                                      // - childNode common_type:0.0.1:local:298fh29h2323f == \"action\" \n                                      \n                                      let inputNode = INPUT.data.inputNode;\n                                      \n                                      if(inputNode.nodeId){\n                                        return false;\n                                      }\n                                      \n                                      if(inputNode.type != 'external_identity:0.0.1:local:8982f982j92'){\n                                        return false;\n                                      }\n                                      \n                                      // if(inputNode.data.learn != 'browser_developer'){\n                                      //   return null;\n                                      // }\n                                      \n                                      // // strip childnodes\n                                      // // delete inputNode.nodes; \n                                      // // delete inputNode.parent;\n                                      // delete inputNode.data;\n              \n                                      return inputNode;\n                                      \n                                    })()`\n                                  }\n                                },\n                                // expected/allowed schemas for return \n                                // outputSchemas: [\n                                //   'query_result:0.0.1:local:32490usfj23o23f',\n                                //   'internal_error_output:0.0.1:local:32948x2u3cno2c'\n                                // ]\n                              }\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              // let nodes = universe.lodash.find(response.data.actionResponses[0].data[0].nodes,{type: 'code:0.0.1:local:32498h32f2'});\n              let nodes = response.data.actionResponses[0].data;\n              \n              // let componentNode = await universe.runInVM(result[0],{});\n              this.setState({\n                nodes: nodes\n              })\n              \n              \n            } catch(err){\n              console.error('Failed getting local nodes');\n            }\n            \n          });\n          \n          \n          // this.setState({\n          //   value: 5\n          // });\n          \n          // WINDOW.alert(10);\n          // let x = WINDOW.prompt('what','');\n          // this.setState({\n          //   value: parseInt(x,10)\n          // })\n          \n          \n          // let IdentityNode = null;\n          // let identities = await universe.searchMemory({\n          //   filter: {\n          //     sqlFilter: {\n          //       type: 'remote_datasource:0.0.1:local:298f3h92hf9s8dhf23f'\n          //     },\n          //     // function for returning data from the Node, after filtering a bit \n          //     // - includes both the Node, and Nodes with nodeId (pointers) \n          //     filterNodes: tmpNodes=>{\n          //       // this runs isolated, outside of the above context? (not sure) \n          //       return new Promise((resolve, reject)=>{\n          //         resolve(tmpNodes);\n          //       });\n          //     },\n          //   }\n          // });\n        }\n        \n        @autobind\n        handleClick(ExternalIdentityNode){\n          console.log('Clicked ExternalIdentityNode');\n          this.props.setState({\n            ExternalIdentityNode \n          });\n        }\n        \n        @autobind\n        handleContextClick(e, data){\n          // console.log('Clicked ExternalIdentityNode');\n          // this.props.setState({\n          //   ExternalIdentityNode \n          // });\n          console.log('Clicked:', data);\n        }\n        \n        @autobind\n        async handleAddFriend(){\n          let network = WINDOW.prompt('Public or Test?','public');\n          \n          let opts = {};\n          switch(network){\n            case 'public':\n              opts = {\n                address: 'https://horizon.stellar.org',\n                network: 'public',\n              }\n              break;\n            case 'test':\n              opts = {\n                address: 'https://horizon-testnet.stellar.org',\n                network: 'test',\n              }\n              break;\n            default:\n              return false;\n          }\n          \n          let username = WINDOW.prompt('Username:','');\n          if(!username){\n            return false\n          }\n          \n          let Friend_ExternalIdentityNode = await universe.getSecondForUsername(username,opts);\n          \n          // // Need to create a local Identity, and authenticate with the remote Second to Learn from \n          // // - uses a constant value (token) from the remote Second! \n          // let addressNode = await universe.loadAndRunCapability('Identity',{},{\n          //   type: 'standard_capability_action:0.0.1:local:298j291bs',\n          //   data: {\n          //     action: 'getAddressForWords',\n          //     options: {\n          //       words\n          //     }\n          //   }\n          // });\n          \n          // let address = addressNode.data;\n          \n          // console.log('Address:', address);\n          \n          // let Friend_ExternalIdentityNode = await universe.getIdentityForAddress(address);\n          \n          console.log('MySecond:', this.props.state.OwnerSecondExternalIdentityNode);\n          console.log('FriendSecond', Friend_ExternalIdentityNode);\n          \n          \n          // Make TalkToSecond request to Identify MySecond with remote \n          let connectionResponse = await universe.loadAndRunCapability('TalkToSecond',{},{\n            type: 'standard_capability_action:0.0.1:local:298j291bs',\n            data: {\n              action: 'send',\n              options: {\n                ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                RequestNode: {\n                  type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                  data: {\n                    actions: [\n                      {\n                        matchActionType: 'identify_challenge_initiate:0.0.1:local:8239hf28hf283h',\n                        dataForAction: {\n                          type: 'challenge_init_remote:0.0.1:...',\n                          data: {\n                            ExternalIdentityNode: Friend_ExternalIdentityNode\n                          }\n                        }\n                      }\n                    ]\n                    \n                  }\n                }\n              }\n            }\n          });\n          \n          console.log('Friend Connection Response:', connectionResponse);\n          \n          let responseNode = connectionResponse.data.actionResponses[0];\n          \n          // if added, include an internal \"basic data\" node \n          // - identity, groups, tags \n          if(responseNode.data.result){\n            \n            let newExternalMetadata = {\n              nodeId: responseNode.data.node._id,\n              type: 'external_metadata:dslfjdklj',\n              data: {\n                username,\n                groups: ['friends'],\n                tags: [],\n                network\n              }\n            }\n            console.log('newExternalMetadata', newExternalMetadata);\n            let savedNode = await this.forceNewNode(newExternalMetadata, {skipExistingLearnedNodeId: true});\n            \n          } else {\n            WINDOW.alert('Failed Adding');\n          }\n          \n          \n          \n        }\n        \n        @autobind\n        forceNewNode(nodeToSave, opts, skipEvent){\n          return new Promise(async (resolve, reject) => {\n            \n            console.log('NewNode:', nodeToSave);\n                \n            // return resolve({\n            //   saveNewNode: nodeToSave\n            // });\n            \n            \n            // Make request to save Node on remote \n            try {\n              \n              let ExternalIdentityNodes = await universe.searchMemory({\n                filter: {\n                  sqlFilter: {\n                    type: 'external_identity:0.0.1:local:8982f982j92',\n                    data: {\n                      commonName: 'main' // should keep using for browser development! \n                    }\n                  }\n                }\n              });\n              let ExternalIdentityNode = ExternalIdentityNodes[0];\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          {\n                            matchActionType: 'forced_learn_node:0.0.1:local:34907234987sf23',\n                            dataForAction: {\n                              type: 'forced_learn_node:0.0.1:local:34907234987sf23',\n                              data: {\n                                optionsNode: {\n                                  type: 'options_generic:0.0.1:local:289f3j29832',\n                                  data: opts || {}\n                                },\n                                dataNode: nodeToSave\n                              }\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              console.log('NewNode response:', response);\n              \n              // get the new node \n              let savedNode = response.data.actionResponses[0];\n              \n              // console.log('Saved Node:', savedNode);\n              \n              if(skipEvent !== true){\n                try {\n                  universe.EE.emit('nodes-modified', '');\n                }catch(err){\n                  console.error(err);\n                }\n              }\n              \n              return resolve(savedNode);\n              \n              // this.setState({\n              //   saving: false\n              // })\n              \n            } catch(err){\n              console.error('Failed getting local nodes');\n              \n              // alert('Failed');\n              \n              // this.setState({\n              //   saving: false\n              // })\n              \n            }\n            \n          })\n        }\n        \n        @autobind\n        handleClickNode(friendNode){\n        }\n        \n        @autobind\n        handleChangeGroup(e, data){\n          // Add/update existing group info \n          return new Promise(async (resolve, reject)=>{\n            \n            console.log('Data:', data);\n            \n            let {node} = data;\n            let groupStr = '';\n            let groupNode = universe.lodash.find(node.nodes, {type: 'group_by_tag:0.0.1:local:2f9skjf2n1l'});\n            if(groupNode){\n              groupStr = groupNode.data.tag;\n            }\n            \n            groupStr = WINDOW.prompt('Group Tag:', groupStr);\n            if(!groupStr || !groupStr.trim().length){\n              return false;\n            }\n            \n            // Add/Updat\n            \n            // Get ExternalIdentityNode for TalkToSecond \n            let ExternalIdentityNodes = await universe.searchMemory({\n              filter: {\n                sqlFilter: {\n                  type: 'external_identity:0.0.1:local:8982f982j92',\n                  data: {\n                    commonName: 'main'\n                  }\n                }\n              }\n            });\n            let ExternalIdentityNode = ExternalIdentityNodes[0];\n            \n            \n            if(groupNode){\n              console.log('Updating groupNode');\n              \n              groupNode.data.tag = groupStr.trim();\n            \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          // missing Identity! \n                          {\n                            matchActionType: 'update_node:0.0.1:local:392821982y3',\n                            dataForAction: {\n                              type: 'node:0.0.1:local:123445',\n                              data: groupNode\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              console.log('Update response:', response);\n              \n              try {\n                universe.EE.emit('nodes-modified', '');\n              }catch(err){\n                console.error(err);\n              }\n              \n            } else {\n              \n              console.log('Saving new groupNode');\n              \n              groupNode = {\n                nodeId: node._id,\n                type: 'group_by_tag:0.0.1:local:2f9skjf2n1l',\n                data: {\n                  tag: groupStr.trim()\n                }\n              }\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          // missing Identity! \n                          {\n                            matchActionType: 'forced_learn_node:0.0.1:local:34907234987sf23',\n                            dataForAction: {\n                              type: 'forced_learn_node:0.0.1:local:34907234987sf23',\n                              data: {\n                                optionsNode: {\n                                  type: 'options_generic:0.0.1:local:289f3j29832',\n                                  data: {skipExistingLearnedNodeId: true}\n                                },\n                                dataNode: groupNode\n                              }\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              console.log('NewNode response:', response);\n              \n              try {\n                universe.EE.emit('nodes-modified', '');\n              }catch(err){\n                console.error(err);\n              }\n              \n            }\n            \n          });\n          \n        }\n        \n        @autobind\n        handleChangeTag(e, data){\n          // Add/update existing text info \n          return new Promise(async (resolve, reject)=>{\n            \n            console.log('Data:', data);\n            \n            let {node} = data;\n            let textStr = '';\n            let textNode = universe.lodash.find(node.nodes, {type: 'text_tag:0.0.1:local:239fj23'});\n            if(textNode){\n              textStr = textNode.data.text;\n            }\n            \n            textStr = WINDOW.prompt('Text Tag:', textStr);\n            if(!textStr || !textStr.trim().length){\n              return false;\n            }\n            \n            // Add/Update\n            \n            // Get ExternalIdentityNode for TalkToSecond \n            let ExternalIdentityNodes = await universe.searchMemory({\n              filter: {\n                sqlFilter: {\n                  type: 'external_identity:0.0.1:local:8982f982j92',\n                  data: {\n                    commonName: 'main'\n                  }\n                }\n              }\n            });\n            let ExternalIdentityNode = ExternalIdentityNodes[0];\n            \n            \n            if(textNode){\n              console.log('Updating textNode');\n              \n              textNode.data.text = textStr.trim();\n            \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          // missing Identity! \n                          {\n                            matchActionType: 'update_node:0.0.1:local:392821982y3',\n                            dataForAction: {\n                              type: 'node:0.0.1:local:123445',\n                              data: textNode\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              console.log('Update response:', response);\n              \n              try {\n                universe.EE.emit('nodes-modified', '');\n              }catch(err){\n                console.error(err);\n              }\n              \n            } else {\n              \n              console.log('Saving new textNode');\n              \n              textNode = {\n                nodeId: node._id,\n                type: 'text_tag:0.0.1:local:239fj23',\n                data: {\n                  text: textStr.trim()\n                }\n              }\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          // missing Identity! \n                          {\n                            matchActionType: 'forced_learn_node:0.0.1:local:34907234987sf23',\n                            dataForAction: {\n                              type: 'forced_learn_node:0.0.1:local:34907234987sf23',\n                              data: {\n                                optionsNode: {\n                                  type: 'options_generic:0.0.1:local:289f3j29832',\n                                  data: {skipExistingLearnedNodeId: true}\n                                },\n                                dataNode: textNode\n                              }\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              console.log('NewNode response:', response);\n              \n              try {\n                universe.EE.emit('nodes-modified', '');\n              }catch(err){\n                console.error(err);\n              }\n              \n            }\n            \n          });\n          \n        }\n        \n        @autobind\n        handleRemoveNode(e, data){\n          // Add/update existing text info \n          return new Promise(async (resolve, reject)=>{\n            \n            console.log('Data:', data);\n            \n            let {node} = data;\n            \n            // Send \"update_node\" command with active=false \n            \n            // Get ExternalIdentityNode for TalkToSecond \n            let ExternalIdentityNodes = await universe.searchMemory({\n              filter: {\n                sqlFilter: {\n                  type: 'external_identity:0.0.1:local:8982f982j92',\n                  data: {\n                    commonName: 'main'\n                  }\n                }\n              }\n            });\n            let ExternalIdentityNode = ExternalIdentityNodes[0];\n            \n            node.active = false;\n          \n            let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n              type: 'standard_capability_action:0.0.1:local:298j291bs',\n              data: {\n                action: 'send',\n                options: {\n                  ExternalIdentityNode,\n                  RequestNode: {\n                    type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                    data: {\n                      actions: [\n                        // missing Identity! \n                        {\n                          matchActionType: 'update_node:0.0.1:local:392821982y3',\n                          dataForAction: {\n                            type: 'node:0.0.1:local:123445',\n                            data: node\n                          }\n                        }\n                      ]\n                      \n                    }\n                  }\n                }\n              }\n            });\n          \n            console.log('RemovedNode response:', response);\n            \n            try {\n              universe.EE.emit('nodes-modified', '');\n            }catch(err){\n              console.error(err);\n            }\n            \n            \n          });\n          \n        }\n        \n        @autobind\n        handleView(e, data){\n          \n          let {node} = data;\n          this.props.setState({\n            viewingNode: node,\n            ExternalIdentityNode: node\n          })\n          \n          \n        }\n        \n        @autobind\n        handleFileChange(e){\n          const files = e.target.files;\n          let file = files[0];\n          if(file == null){\n            return WINDOW.alert('No file selected.');\n          }\n          this.getSignedRequest(file);\n        }\n        \n        @autobind\n        getSignedRequest(file){\n          \n          return new Promise(async (resolve, reject)=>{\n            \n            try {\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          {\n                            matchActionType: 'request_file_upload:0.0.1:local:00838923flkwne',\n                            dataForAction: {\n                              type: 'request_file_upload:0.0.1:local:00838923flkwne',\n                              data: {\n                                fileName: file.name,\n                                fileType: file.type\n                              }\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              let fileResponse = response.data.actionResponses[0];\n              \n              // // let componentNode = await universe.runInVM(result[0],{});\n              // this.setState({\n              //   nodes: nodes\n              // })\n              \n              console.log('fileResponse', fileResponse);\n              \n              if(fileResponse.type != 'request_file_upload_response:0.0.1:local:89h91h9f2nsmfd'){\n                console.error('Failed getting signedRequest for uploading file');\n                return;\n              }\n              \n              // Upload to S3\n              await this.uploadFile(file, fileResponse.data.signedRequest, fileResponse.data.url);\n              \n              // console.log('uploadNode:', uploadNode);\n              console.log('Uploaded OK');\n              \n              // Get the \"view\" url \n              let key = fileResponse.data.key;\n              \n              let response2 = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          {\n                            matchActionType: 'request_file_get:0.0.1:local:239hfskhf0j9s',\n                            dataForAction: {\n                              type: 'request_file_get:0.0.1:local:239hfskhf0j9s',\n                              data: {\n                                key: key\n                              }\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              let viewResponse = response2.data.actionResponses[0];\n              let viewUrl = viewResponse.data.url;\n              console.log('View response:', viewResponse, viewResponse.data.url);\n              console.log('Open URL:', viewResponse.data.url);\n              WINDOW.prompt('Url:',viewResponse.data.url);\n              \n              // Save a new Node (with the correct file upload type!) \n              let newPhotoNode = {\n                type: 'photo:0.0.1:local:9832fj293j2f',\n                data: {\n                  url: viewUrl\n                }\n              }\n              \n              let response3 = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          // missing Identity! \n                          {\n                            matchActionType: 'forced_learn_node:0.0.1:local:34907234987sf23',\n                            dataForAction: {\n                              type: 'forced_learn_node:0.0.1:local:34907234987sf23',\n                              data: {\n                                optionsNode: {\n                                  type: 'options_generic:0.0.1:local:289f3j29832',\n                                  data: {skipExistingLearnedNodeId: true}\n                                },\n                                dataNode: newPhotoNode\n                              }\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              console.log('newPhotoNode response:', response3);\n              \n              try {\n                universe.EE.emit('nodes-modified', '');\n              }catch(err){\n                console.error(err);\n              }\n              \n              \n              \n            } catch(err){\n              console.error('Failed getting signedRequest', err);\n            }\n            \n          });\n          \n        }\n        \n        @autobind\n        uploadFile(file, signedRequest, url){\n          return new Promise(async (resolve,reject)=>{\n            \n            console.log('Uploading File');\n            try {\n                \n              const xhr = new WINDOW.XMLHttpRequest();\n              xhr.open('PUT', signedRequest);\n              xhr.onreadystatechange = () => {\n                if(xhr.readyState === 4){\n                  console.log('File sent!');\n                  if(xhr.status === 200){\n                    // document.getElementById('preview').src = url;\n                    // document.getElementById('avatar-url').value = url;\n                    // WINDOW.alert('Uploaded ok!!!!');\n                    resolve(); //JSON.parse(xhr.responseText));\n                  }\n                  else{\n                    WINDOW.alert('Could NOT upload file.');\n                  }\n                }\n              };\n              xhr.send(file);\n              \n            }catch(err){\n              console.error('Failed file upload:', err);\n            }\n            \n          });\n        }\n        \n        @autobind\n        renderNodes(nodes){\n          \n          nodes = universe.lodash.sortBy(nodes, 'updatedAt');\n          \n          return (\n            <div className=\"\">\n              {\n                nodes.map(node=>{\n                          \n                  // What type of Second is this? \n                  // - Friend/Person  \n                  // - Browser \n                  // - Device\n                  // - Unknown\n                  let groupTag = 'Unknown'; \n                  let textTag = 'unknown'; \n                  let groupTagNode = universe.lodash.find(node.nodes,{type: 'group_by_tag:0.0.1:local:2f9skjf2n1l'});\n                  if(groupTagNode){\n                    groupTag = groupTagNode.data.tag;\n                  }\n                  let textTagNode = universe.lodash.find(node.nodes,{type: 'text_tag:0.0.1:local:239fj23'});\n                  if(textTagNode){\n                    textTag = textTagNode.data.text;\n                  }\n                  \n                  let metadata = universe.lodash.find(node.nodes,n=>{\n                    return n.type.split(':')[0] == 'external_metadata'\n                  });\n                  \n                  let tooltip = node.nodes[0].data.connection;\n                  \n                  return (\n                    <div key={node._id}>\n                    \n                      <ContextMenuTrigger id={\"some_unique_identifier-\" + node._id}>\n                        \n                        <div className=\"tooltip-holder\" style={{cursor:'pointer'}} onClick={e=>this.handleView(e,{node})}>\n                          <div className=\"tooltip-trigger\">\n                            {/*{groupTag}: {textTag}*/}\n                            {metadata ? metadata.data.username : 'Missing Metadata'}\n                          </div>\n                          {\n                            !tooltip ? '':\n                            <div className=\"tooltip\">\n                              {tooltip}\n                            </div>\n                          }\n                        </div>\n                        \n                      </ContextMenuTrigger>\n                \n                      <ContextMenu id={\"some_unique_identifier-\" + node._id}>\n                        <MenuItem data={{node}} onClick={this.handleChangeTag}>\n                          {node.nodes[0].data.connection}\n                        </MenuItem>\n                        <MenuItem divider />\n                        <MenuItem data={{node}} onClick={this.handleChangeGroup}>\n                          Change Group\n                        </MenuItem>\n                        <MenuItem data={{node}} onClick={this.handleChangeTag}>\n                          Change Tag\n                        </MenuItem>\n                        <MenuItem data={{node}} onClick={this.handleView}>\n                          View\n                        </MenuItem>\n                        <MenuItem divider />\n                        <MenuItem data={{node}} onClick={this.handleRemoveNode}>\n                          Delete\n                        </MenuItem>\n                      </ContextMenu>\n                      \n                    </div>\n                  )\n                })\n              }\n            </div>\n          )\n        }\n        \n        render(){\n          \n          let nodes = this.state.nodes.filter(node=>{\n      \n            let metadataExists = universe.lodash.find(node.nodes,n=>{\n              return n.type.split(':')[0] == 'external_metadata'\n            });\n            \n            return metadataExists;\n            \n          });\n          \n          console.log('Render Nodes:', nodes);\n          \n          // load actions from remote!\n          // - want to have some default actions that are easy to call/trigger \n          // - simple way of calling a Capability? \n          let actions = [];\n          \n          return (\n            <div className=\"\">\n              \n              <div style={{borderBottom: '1px solid #888'}}>\n              \n                <input type=\"file\" id=\"file-input\" onChange={this.handleFileChange} />\n                <p id=\"status\">Please select a file</p>\n                \n              </div>\n              \n              <br />\n              \n              <h3 className=\"title is-4\">\n                Connected:\n                &nbsp;\n                <button className=\"button is-small\" onClick={this.handleAddFriend}>\n                  <span className=\"icon is-small\">\n                    <i className=\"fa fa-plus\"></i>\n                  </span>\n                </button>\n                \n              </h3>\n              <h3 className=\"subtitle is-6\">\n                Remote Seconds\n              </h3>\n              \n              {this.renderNodes(nodes)}\n              \n            </div>\n          )\n        }\n        \n      }\n      \n      ListComponent = universe.ReactGlobalState(ListComponent);\n      ListComponent = universe.ReactRouterDomWithRouter(ListComponent);\n      // console.log('GLOBALSTATE:', universe.ReactGlobalState);\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: ListComponent\n      });\n      \n    }catch(err){\n      resolve({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "ListRemoteConnectedToComponent",
    "key": "aa7edc35-5d30-4f90-81a3-9afdecd83e0d"
  },
  "active": true,
  "createdAt": 1519283344434,
  "updatedAt": 1521508214105
}