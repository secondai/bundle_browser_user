{
  "_id": "5a2784779cb84d22ebce6110",
  "nodeId": "5a2784759cb84d22ebce60ef",
  "type": "react_component:0.0.1:local:98912hd89",
  "data": {
    "key": "e112ac57-d342-4d1e-ab6e-fe36f1ff32b7",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      class ErrorComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              [ErrorRenderer]\n            </div>\n          )\n        }\n      }\n      \n      class ListComponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {\n            nodes: []\n          }\n        }\n        \n        componentDidMount(){\n          \n          // \n          return new Promise(async (resolve,reject)=>{\n              \n            try {\n                \n              let nodes = await universe.searchMemory({\n                filter: {\n                  sqlFilter: {\n                    nodeId: null\n                  }\n                }\n              });\n              // let componentNode = await universe.runInVM(result[0],{});\n              this.setState({\n                nodes: nodes\n              })\n            } catch(err){\n              console.error('Failed getting local nodes');\n            }\n            \n          });\n          \n          \n          // this.setState({\n          //   value: 5\n          // });\n          \n          // WINDOW.alert(10);\n          // let x = WINDOW.prompt('what','');\n          // this.setState({\n          //   value: parseInt(x,10)\n          // })\n          \n          \n          // let IdentityNode = null;\n          // let identities = await universe.searchMemory({\n          //   filter: {\n          //     sqlFilter: {\n          //       type: 'remote_datasource:0.0.1:local:298f3h92hf9s8dhf23f'\n          //     },\n          //     // function for returning data from the Node, after filtering a bit \n          //     // - includes both the Node, and Nodes with nodeId (pointers) \n          //     filterNodes: tmpNodes=>{\n          //       // this runs isolated, outside of the above context? (not sure) \n          //       return new Promise((resolve, reject)=>{\n          //         resolve(tmpNodes);\n          //       });\n          //     },\n          //   }\n          // });\n        }\n        \n        render(){\n          return (\n            <div className=\"\">\n              {\n                this.state.nodes.map(node=>{\n                  return (\n                    <div key={node._id}>\n                      {node.type}\n                    </div>\n                  )\n                })\n              }\n            </div>\n          )\n        }\n      }\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: ListComponent\n      });\n      \n    }catch(err){\n      resolve({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "ListComponent"
  },
  "active": true,
  "createdAt": 1512539255918,
  "updatedAt": 1513153205561
}