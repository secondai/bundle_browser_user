{
  "_id": "5ac47ae865eb53001d560823",
  "nodeId": "5ac47ae265eb53001d56081e",
  "type": "react_component:0.0.1:local:98912hd89",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      class ErrorComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              [ErrorRenderer]\n            </div>\n          )\n        }\n      }\n      \n      class ListComponent extends React.Component {\n        constructor(props){\n          super(props);\n          \n          let remoteSearchStr;\n          switch(props.resultType){\n            case 'actions':\n              remoteSearchStr = `\n                let actionSearch = {\n                  type: 'action_pointer:0.0.1:local:238972ncr', // should use \"common_type\" ?? \n                }\n                let hasActionPointerChild = miniverse.lodash.find(inputNode.nodes, actionSearch);\n\n                if(!hasActionPointerChild){\n                  return false;\n                }\n                \n                // return action nodes! \n                return inputNode;\n              `\n              break;\n              \n            case 'photos':\n              remoteSearchStr = `\n                if(inputNode.type != 'photo:0.0.1:local:9832fj293j2f'){\n                  return false;\n                }\n                \n                // return action nodes! \n                return inputNode;\n              `\n              break;\n              \n            default:\n              // all\n              remoteSearchStr = `\n                // return action nodes! \n                return inputNode;\n              `\n              break;\n          }\n          \n          this.state = {\n            nodes: [],\n            remoteSearchStr\n          }\n        }\n        \n        componentWillReceiveProps(nextProps){\n          if(nextProps.state.ExternalIdentityNode){\n            // refetch\n            this.fetchDataForRemoteFriend(nextProps);\n          }\n        }\n        \n        @autobind\n        fetchDataForRemoteFriend(props){\n          // fetch data by passing the request through the cloud/server Second \n          \n          props = props || this.props;\n          \n          console.log('fetchDataForRemoteFriend.New Props', props);\n          \n          let {\n            OwnerSecondExternalIdentityNode,\n            ExternalIdentityNode // friend's ExternalIdentityNode on cloud Second\n          } = props.state;\n          \n          if(!OwnerSecondExternalIdentityNode || !ExternalIdentityNode){\n            console.log('Missing OwnerSecondExternalIdentityNode or ExternalIdentityNode', OwnerSecondExternalIdentityNode, ExternalIdentityNode);\n            return false;\n          }\n          \n          console.log('Fetching inside remote:', ExternalIdentityNode);\n          \n          // \n          return new Promise(async (resolve,reject)=>{\n              \n            try {\n              \n              // this is the query sent to the remote! \n              let searchRequestNode = {\n                type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                data: {\n                  matchFunctionNode: {\n                    type: 'code_miniverse:0.0.1:local:2782fh8823s23',\n                    data: {\n                      code: `(()=>{\n                        let inputNode = INPUT.data.inputNode;\n                        if(inputNode.nodeId){\n                          return false;\n                        }\n                        \n                        ${this.state.remoteSearchStr}\n                        \n                      })()`\n                    }\n                  },\n                }\n              }\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode: OwnerSecondExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          \n                          {\n                            matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n                            dataForAction: {\n                              type: 'string:...',\n                              data: OwnerSecondExternalIdentityNode.data.token\n                            }\n                          },\n                          \n                          {\n                            matchActionType: 'search_remote_datasource:0.0.1:local:3249sfj2389fh289',\n                            dataForAction: {\n                              type: 'standard_remote_query_request:0.0.1:local:65723f2khfds',\n                              data: {\n                                internalId: ExternalIdentityNode._id,\n                                // publicKey: ExternalIdentityNode.data.publicKey,\n                                RequestNode: searchRequestNode\n                              }\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              // let nodes = universe.lodash.find(response.data.actionResponses[0].data[0].nodes,{type: 'code:0.0.1:local:32498h32f2'});\n              console.log('FullExternalResponse', response);\n              \n              let externalResponse = response.data.actionResponses[1];\n              let nodes = externalResponse.data.data;\n              \n              // console.log('NODES in response:', externalResponse);\n              \n              // let componentNode = await universe.runInVM(result[0],{});\n              this.setState({\n                nodes: nodes\n              })\n            } catch(err){\n              console.error('Failed getting local nodes');\n            }\n            \n          });\n          \n          \n          // this.setState({\n          //   value: 5\n          // });\n          \n          // WINDOW.alert(10);\n          // let x = WINDOW.prompt('what','');\n          // this.setState({\n          //   value: parseInt(x,10)\n          // })\n          \n          \n          // let IdentityNode = null;\n          // let identities = await universe.searchMemory({\n          //   filter: {\n          //     sqlFilter: {\n          //       type: 'remote_datasource:0.0.1:local:298f3h92hf9s8dhf23f'\n          //     },\n          //     // function for returning data from the Node, after filtering a bit \n          //     // - includes both the Node, and Nodes with nodeId (pointers) \n          //     filterNodes: tmpNodes=>{\n          //       // this runs isolated, outside of the above context? (not sure) \n          //       return new Promise((resolve, reject)=>{\n          //         resolve(tmpNodes);\n          //       });\n          //     },\n          //   }\n          // });\n        }\n        \n        @autobind\n        handleClickNode(Node){\n          this.props.setState({\n            ShowDetailNode: Node \n          });\n        }\n        \n        @autobind\n        renderNodes(nodes){\n          nodes = universe.lodash.sortBy(nodes, 'updatedAt');\n          return (\n            <div className=\"\">\n              {\n                nodes.map(node=>{\n                  \n                  let tooltip = null;\n                  // return a different tooltip depending on the type\n                  try {\n                    switch(node.type){\n                      case 'react_component:0.0.1:local:98912hd89':\n                        tooltip = node.data.internalId;\n                        break;\n                        \n                      case 'parent_of_nodes_to_learn:0.0.1:local:2839fh29':\n                        tooltip = node.data.learn;\n                        break;\n                        \n                      case 'text_tag:0.0.1:local:239fj23':\n                        tooltip = node.data.text;\n                        break;\n                        \n                      case 'capability:0.0.1:local:187h78h23':\n                        tooltip = node.data.key;\n                        break;\n                        \n                      case 'code:0.0.1:local:32498h32f2':\n                        tooltip = node.data.note;\n                        break;\n                        \n                      case 'external_identity:0.0.1:local:8982f982j92':\n                        tooltip = node.data.commonName || '(no commonName)';\n                        break;\n                        \n                      case 'external_identity_connect_method:0.0.1:local:382989239hsdfmn':\n                        tooltip = node.data.connection;\n                        break;\n                        \n                      default:\n                        break;\n                    }\n                  }catch(err){\n                  }\n                  \n                  return (\n                    <div key={node._id}>\n                      <div onClick={e=>this.handleClickNode(node)} style={{cursor:'pointer'}}>\n                  \n                        <div className=\"hover-item tooltip-holder\">\n                          <div className=\"tooltip-trigger\">\n                            {node.type}\n                          </div>\n                          {\n                            !tooltip ? '':\n                            <div className=\"tooltip\">\n                              {tooltip}\n                            </div>\n                          }\n                        </div>\n                        \n                      </div>\n                      {\n                        !(node.nodes && node.nodes.length) ? '':\n                        <div style={{paddingLeft:'8px'}}>\n                          {this.renderNodes(node.nodes)}\n                        </div>\n                      }\n                    </div>\n                  )\n                })\n              }\n            </div>\n          )\n        }\n        \n        render(){\n          return (\n            <div className=\"\">\n              {\n                this.renderNodes(this.state.nodes)\n              }\n            </div>\n          )\n        }\n      }\n      \n      ListComponent = universe.ReactGlobalState(ListComponent);\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: ListComponent\n      });\n      \n    }catch(err){\n      resolve({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "ListRemoteConnectedToDataComponent",
    "key": "57f377d7-13fe-4bb7-974b-35328c7a3825"
  },
  "active": true,
  "createdAt": 1522825960596,
  "updatedAt": null
}