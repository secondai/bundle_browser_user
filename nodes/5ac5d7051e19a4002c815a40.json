{
  "_id": "5ac5d7051e19a4002c815a40",
  "nodeId": "5ac47ae265eb53001d56081e",
  "type": "react_component:0.0.1:local:98912hd89",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      const Link = universe.ReactRouterDomLink;\n      \n      class EmbeddedComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              embeddedComponenthere\n            </div>\n          )\n        }\n      }\n      \n      class ErrorComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        render(){\n          return (\n            <div>\n              ErrorLoading\n            </div>\n          )\n        }\n      }\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {\n            browserList: null,\n            remoteList: null,\n            mainEditor: null,\n            remoteFriendList: null,\n            remoteFriendDataList: null\n            // browser: null,\n          }\n        }\n        \n        componentDidMount(){\n          \n          console.log('Mounting EditAppComponent');\n          \n          // requires the appNodeRoot to exist, for limiting the results \n          console.log('appNodeRoot:', this.props.state.appNodeRoot);\n          if(!this.props.state.appNodeRoot){\n            console.error('Missing appNodeRoot on mount');\n            return this.props.history.push('/'); // TODO: include identity in URL\n          } else {\n            console.log('appNodeRoot exists');\n          }\n          \n          return new Promise(async (resolve,reject)=>{\n              \n            try {\n                \n              let EditAppListComponent = await this.props.loadComponent({\n                internalId: 'EditAppListComponent'\n              });\n              this.setState({\n                EditAppListComponent\n              })\n              \n              \n              let MainAppEditorComponent = await this.props.loadComponent({\n                internalId: 'MainAppEditorComponent'\n              });\n              this.setState({\n                MainAppEditorComponent\n              })\n              \n            } catch(err){\n              console.error('Failed getting Components', err);\n              console.error('PROPS', this.props);\n            }\n            \n            \n          });\n          \n        }\n        \n        render(){\n          \n          console.log('Render EditAppComponent', this.state);\n          \n          const EditAppListComponent = this.state.EditAppListComponent || ErrorComponent;\n          const MainAppEditorComponent = this.state.MainAppEditorComponent || ErrorComponent;\n          \n          return (\n            <div className=\"flex-main\">\n              <div className=\"flex-left\" style={{padding:'4px'}}>\n                \n                <div>\n                  <EditAppListComponent />\n                </div>\n                \n              </div>\n              <div className=\"flex-middle\">\n                \n                {\n                  this.props.state.editingNode ?\n                  <RecreateChildOnPropsChange \n                      node={this.props.state.editingNode}\n                      editorComponent={MainAppEditorComponent}\n                    >\n                    <MainAppEditorComponent\n                      node={this.props.state.editingNode}\n                    />\n                  </RecreateChildOnPropsChange>\n                  :''\n                }\n                \n              </div>\n              <div className=\"flex-right\">\n                \n                {/*\n                <div>\n                  <RemoteFriendListComponent />\n                </div>\n                */}\n                \n              </div>\n            </div>\n          )\n        }\n      }\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      mycomponent = universe.ReactHelpers(mycomponent);\n      mycomponent = universe.ReactRouterDomWithRouter(mycomponent);\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "EditAppComponent",
    "key": "75b33b60-ecb5-4181-b30f-975e53adba94",
    "version": "1",
    "author": "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcuXovU+RZy85KMqLakYSH1mdV\nWdpEUtgcXUyGyU5hVeTO7BkV/kxeC2upcxOwNnrBOdsvHI3nrrILgt90/hCSHKzx\nhOFLREorGoKtSEHxI7/SnzzlWtV3gT/IP5GVHIyvuJBx3hCti0dH55DZG8iMGZ2y\ncGpV73Dez3hHmeBh6wIDAQAB\n-----END PUBLIC KEY-----"
  },
  "active": true,
  "createdAt": 1522915077895,
  "updatedAt": 1522956801188
}